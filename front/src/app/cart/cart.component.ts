import {Component, OnInit} from '@angular/core';
import {CartItem, CartService} from '../Service/CartService';
import {NgClass, NgForOf, NgIf, NgStyle} from '@angular/common';
import {TranslatePipe} from '@ngx-translate/core';
import {NavigationEnd, Router} from '@angular/router';

@Component({
  selector: 'app-cart',
  imports: [
    NgStyle,
    NgClass,
    NgIf,
    NgForOf,
    TranslatePipe
  ],
  templateUrl: './cart.component.html',
  standalone: true,
  styleUrl: './cart.component.css'
})
export class CartComponent implements OnInit {
  cartItems: CartItem[] = []; // üîπ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ—Ä–∑–∏–Ω—ã

  constructor(private cartService: CartService, private router: Router) {}

  // üîπ –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
  get overallQuantity(): number {
    return this.cartService.overallQuantity;
  }

  // üîπ –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
  get grandTotal(): number {
    return this.cartService.grandTotal;
  }

  // üîπ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  ngOnInit(): void {
    this.cartService.fetchCart().subscribe((items) => {
      this.cartItems = items;
    });

    this.router.events.subscribe(event => {
      if (event instanceof NavigationEnd) {
        window.scrollTo(0, 0); // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      }
    });
  }

  // üîπ –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  increaseQuantity(item: CartItem) {
    this.cartService.increaseQuantity(item);
  }

  // üîπ –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  decreaseQuantity(item: CartItem) {
    this.cartService.decreaseQuantity(item);
  }

  // üîπ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
  removeFromCart(id: number) {
    this.cartService.removeFromCart(id).subscribe(() => {
      this.cartItems = this.cartItems.filter((item) => item.id !== id);
    });
  }

  // üîπ –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã (–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑)
  buyItems() {
    if (this.cartItems.length === 0) {
      alert('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!');
    } else {
      this.cartService.checkoutCart().subscribe(() => {
        this.cartItems = []; // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        alert('–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!');
      });
    }
  }
}
